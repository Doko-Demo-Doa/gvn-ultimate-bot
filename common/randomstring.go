package common

import (
	"crypto/rand"
	"encoding/base64"
)

const TokenBytes = 32

type RandomString interface {
	GenerateToken() (string, error)
	NumberOfBytes(base64String string) (int, error)
}

type randomString struct{}

func NewRandomString() RandomString {
	return &randomString{}
}

func (rd *randomString) GenerateToken() (string, error) {
	b, err := rd.generateRandomBytes(TokenBytes)
	if err != nil {
		return "", err
	}

	return base64.URLEncoding.EncodeToString(b), nil
}

// Generate n random bytes
func (rd *randomString) generateRandomBytes(n int) ([]byte, error) {
	b := make([]byte, n)
	_, err := rand.Read(b)
	if err != nil {
		return nil, err
	}

	return b, nil
}

// Returns the number of bytes used in any string
// generated by the String or GenerateToken function
func (rd *randomString) NumberOfBytes(base64String string) (int, error) {
	b, err := base64.RawStdEncoding.DecodeString(base64String)
	if err != nil {
		return -1, err
	}

	return len(b), nil
}
